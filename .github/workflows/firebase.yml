name: Build And Release Coffeecard App

on:
  push:
    branches: [develop, production, feature/jonas/prod-release-pipeline]

jobs:
  build_and_test:
    uses: ./.github/workflows/flutter.yml

  version:
    name: Versioning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Determine versioning
        uses: paulhatch/semantic-version@v4.0.3
        id: versioning
        with:
          tag_prefix: v
          major_pattern: (MAJOR)
          minor_pattern: (MINOR)
          format: "${major}.${minor}.${patch}-b${increment}"
          change_path: android/ ios/ lib/
          bump_each_commit: false
          search_commit_body: true
          user_format_type: "csv"
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      increment: ${{ steps.versioning.outputs.increment }}

  build_ios:
    name: Build iOS App
    runs-on: macos-latest
    needs: [build_and_test, version]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install the Apple certificate and provisioning profile
        env:
          APPLE_IOS_SIGNING_CERT: ${{ secrets.APPLE_IOS_SIGNING_CERT_PROD }}
          APPLE_IOS_SIGNING_CERT_PW: ${{ secrets.APPLE_IOS_SIGNING_CERT_PW }}
          APPLE_IOS_PROVISIONING_PROFILE: ${{ secrets.APPLE_IOS_PROVISIONING_PROFILE_PROD }}
          APPLE_KEYCHAIN_PW: ${{ secrets.APPLE_KEYCHAIN_PW }}
        # if: github.ref_name == 'develop'
        run: scripts/setup-certs.sh
      - name: Setup Java
        uses: actions/setup-java@v2.4.0
        with:
          distribution: "adopt"
          java-version: "11.x"
      - name: Setup Flutter environment
        uses: subosito/flutter-action@v2.3.0
        with:
          flutter-version: "3.0.0"
          channel: "stable"
      - name: Download dependencies
        run: flutter pub get
      - name: Decode GoogleService-Info.plist
        env:
          SERVICES_JSON: ${{ secrets.FIREBASE_IOS_SERVICES_JSON }}
        run: echo $SERVICES_JSON > ios/Runner/GoogleService-Info.plist
      - name: Generate code
        run: scripts/.generate-code.sh code
      - name: Build iOS
        run: flutter build ipa --release --export-options-plist=ios/exportOptions.prod.plist --build-name ${{ needs.version.outputs.version }} --build-number ${{ needs.version.outputs.increment }}
      - name: Upload iOS build
        uses: actions/upload-artifact@v3.0.0
        with:
          name: ios
          path: build/ios/ipa

  build_apk:
    name: Build Android App
    runs-on: ubuntu-latest
    needs: [build_and_test, version]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2.4.0
        with:
          distribution: "adopt"
          java-version: "11.x"
      - name: Setup Flutter environment
        uses: subosito/flutter-action@v2.3.0
        with:
          flutter-version: "3.0.0"
          channel: "stable"
      - name: Download dependencies
        run: flutter pub get
      - name: Decode google-services.json
        env:
          SERVICES_JSON: ${{ secrets.FIREBASE_ANDROID_SERVICES_JSON }}
        run: echo $SERVICES_JSON > android/app/google-services.json
      - name: Generate code
        run: scripts/.generate-code.sh code
      - name: Build APK
        run: flutter build apk --build-name ${{ needs.version.outputs.version }} --build-number ${{ needs.version.outputs.increment }}
      - name: Upload Android build
        uses: actions/upload-artifact@v3.0.0
        with:
          name: android
          path: build/app/outputs/apk/release

  dev_upload_ios:
    name: Upload iOS build to Firebase App Distribution
    runs-on: ubuntu-latest
    needs: [build_ios]
    if: github.ref_name == 'develop'

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: ios
      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.3.3
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: analogio-devs
          file: Analog.ipa

  dev_upload_apk:
    name: Upload Android build to Firebase App Distribution
    runs-on: ubuntu-latest
    needs: [build_apk]
    if: github.ref_name == 'develop'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: android
      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.3.3
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: analogio-devs
          file: app-release.apk
          
  prod_release_ios:
    name: Upload iOS build to App Store connect
    runs-on: macos-latest
    needs: [build_ios]
    # if: github.ref_name == 'production'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: ios
      - name: Upload app to App Store Connect
        env:
          APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
          APP_STORE_CONNECT_PASSWORD: ${{ secrets.APP_STORE_CONNECT_PASSWORD }}
        run: |
          xcrun altool --upload-app -t ios -f "Analog.ipa" -u "$APP_STORE_CONNECT_USERNAME" -p "$APP_STORE_CONNECT_PASSWORD"

  prod_release_android:
    name: Upload Android build to Play Store
    runs-on: ubuntu-latest
    needs: [build_apk]
    # if: github.ref_name == 'production'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: android
      - name: Sign Android APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: .
          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
      - name: Upload to Google Play Store
        uses: r0adkll/upload-google-play@v1.0.16
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAYSTORE_SERVICE_ACCOUNT_JSON }}
          packageName: dk.analog.digitalclipcard
          releaseFiles: ${{ steps.sign_app.outputs.signedReleaseFile }}
          track: internal
          status: draft
