name: Build And Deploy Coffeecard App To Firebase Distribution

on:
  workflow_run:
    workflows: [Flutter build and test]
    types: [completed]
    branches: [develop]

jobs:
  build_ios:
    name: Build iOS App
    runs-on: macos-latest
    steps:
      - name: Install the Apple certificate and provisioning profile
        env:
          APPLE_IOS_SIGNING_CERT: ${{ secrets.APPLE_IOS_SIGNING_CERT }}
          APPLE_IOS_SIGNING_CERT_PW: ${{ secrets.APPLE_IOS_SIGNING_CERT_PW }}
          APPLE_IOS_PROVISIONING_PROFILE: ${{ secrets.APPLE_IOS_PROVISIONING_PROFILE }}
          APPLE_KEYCHAIN_PW: ${{ secrets.APPLE_KEYCHAIN_PW }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APPLE_IOS_SIGNING_CERT" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$APPLE_IOS_PROVISIONING_PROFILE" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$APPLE_KEYCHAIN_PW" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_KEYCHAIN_PW" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_IOS_SIGNING_CERT_PW" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2.4.0
        with:
          distribution: "adopt"
          java-version: "11.x"
      - name: Setup Flutter environment
        uses: subosito/flutter-action@v2.3.0
        with:
          flutter-version: "3.0.0"
          channel: "stable"
      - name: Download dependencies
        run: flutter pub get
      - name: Decode GoogleService-Info.plist
        env:
          SERVICES_JSON: ${{ secrets.FIREBASE_IOS_SERVICES_JSON }}
        run: echo $SERVICES_JSON > ios/Runner/GoogleService-Info.plist
      - name: Generate code
        run: scripts/.generate-code.sh code
      - name: Build iOS
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
      - name: Upload iOS build
        uses: actions/upload-artifact@v3.0.0
        with:
          name: ios
          path: build/ios/ipa
  build_apk:
    name: Build Android App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2.4.0
        with:
          distribution: "adopt"
          java-version: "11.x"
      - name: Setup Flutter environment
        uses: subosito/flutter-action@v2.3.0
        with:
          flutter-version: "3.0.0"
          channel: "stable"
      - name: Download dependencies
        run: flutter pub get
      - name: Decode google-services.json
        env:
          SERVICES_JSON: ${{ secrets.FIREBASE_ANDROID_SERVICES_JSON }}
        run: echo $SERVICES_JSON > android/app/google-services.json
      - name: Generate code
        run: scripts/.generate-code.sh code
      - name: Build APK
        run: flutter build apk
      - name: Upload Android build
        uses: actions/upload-artifact@v3.0.0
        with:
          name: android
          path: build/app/outputs/apk/release
  upload_ios:
    name: Upload iOS build to Firebase App Distribution
    runs-on: ubuntu-latest
    needs: [build_ios]

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: ios
      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.3.2
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: analogio-devs
          file: Analog.ipa
  upload_apk:
    name: Upload Android build to Firebase App Distribution
    runs-on: ubuntu-latest
    needs: [build_apk]

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: android
      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.3.2
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: analogio-devs
          file: app-release.apk
