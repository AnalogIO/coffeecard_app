name: Flutter build and test

on:
  pull_request:
    branches: [develop, production]

  workflow_dispatch:

  workflow_call:
    inputs:
      storeArtifacts:
        required: true
        type: boolean

env:
  FLUTTER_VERSION: 3.0.0
  JAVA_VERSION: 11.x

jobs:
  version:
    name: Versioning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Determine versioning
        uses: paulhatch/semantic-version@v4.0.3
        id: versioning
        with:
          tag_prefix: v
          major_pattern: (MAJOR)
          minor_pattern: (MINOR)
          format: "${major}.${minor}.${patch}-b${increment}"
          change_path: android/ ios/ lib/
          bump_each_commit: false
    outputs:
      increment: ${{ steps.versioning.outputs.increment }}
      version: ${{ steps.versioning.outputs.version }}
      version_tag: ${{ steps.versioning.outputs.version_tag }}

  build_ios:
    name: Build iOS App
    runs-on: macos-latest
    needs: [version]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Apple certificate and provisioning profile (dev)
        run: scripts/setup-certs.command
        # if: github.ref_name == 'develop'
        env:
          APPLE_IOS_SIGNING_CERT: ${{ secrets.APPLE_IOS_SIGNING_CERT }}
          APPLE_IOS_SIGNING_CERT_PW: ${{ secrets.APPLE_IOS_SIGNING_CERT_PW }}
          APPLE_IOS_PROVISIONING_PROFILE: ${{ secrets.APPLE_IOS_PROVISIONING_PROFILE }}
          APPLE_KEYCHAIN_PW: ${{ secrets.APPLE_KEYCHAIN_PW }}
      - name: Install Apple certificate and provisioning profile (prod)
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$APPLE_IOS_SIGNING_CERT" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$APPLE_IOS_PROVISIONING_PROFILE" | base64 --decode --output $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$APPLE_KEYCHAIN_PW" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_KEYCHAIN_PW" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_IOS_SIGNING_CERT_PW" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles        
        # if: github.ref_name == 'production'
        env:
          APPLE_IOS_SIGNING_CERT: ${{ secrets.APPLE_IOS_SIGNING_CERT_PROD }}
          APPLE_IOS_SIGNING_CERT_PW: ${{ secrets.APPLE_IOS_SIGNING_CERT_PW }}
          APPLE_IOS_PROVISIONING_PROFILE: ${{ secrets.APPLE_IOS_PROVISIONING_PROFILE_PROD }}
          APPLE_KEYCHAIN_PW: ${{ secrets.APPLE_KEYCHAIN_PW }}
      - name: Setup Java
        uses: actions/setup-java@v2.4.0
        with:
          distribution: "adopt"
          java-version: ${{ env.JAVA_VERSION }}
      - name: Setup Flutter environment
        uses: subosito/flutter-action@v2.3.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
      - name: Download dependencies
        run: flutter pub get
      - name: Decode GoogleService-Info.plist
        env:
          SERVICES_JSON: ${{ secrets.FIREBASE_IOS_SERVICES_JSON }}
        run: echo $SERVICES_JSON > ios/Runner/GoogleService-Info.plist
      - name: Generate code
        run: scripts/.generate-code.sh code
      - name: Build iOS (dev)
        if: github.ref_name == 'develop'
        run: flutter build ipa --release --export-options-plist=ios/exportOptions.dev.plist --build-name ${{ needs.version.outputs.version }} --build-number ${{ needs.version.outputs.increment }}
      - name: Build iOS (prod)
        # if: github.ref_name == 'production'
        run: flutter build ipa --release --export-options-plist=ios/exportOptions.prod.plist --dart-define=IS_PROD=true --build-name ${{ needs.version.outputs.version }} --build-number ${{ needs.version.outputs.increment }}
      - name: Upload iOS build
        if: ${{ inputs.storeArtifacts }}
        uses: actions/upload-artifact@v3.0.0
        with:
          name: ios
          path: build/ios/ipa

  build_android:
    name: Build Android App
    runs-on: ubuntu-latest
    needs: [version]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2.4.0
        with:
          distribution: "adopt"
          java-version: ${{ env.JAVA_VERSION }}
      - name: Setup Flutter environment
        uses: subosito/flutter-action@v2.3.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
      - name: Download dependencies
        run: flutter pub get
      - name: Decode google-services.json
        env:
          SERVICES_JSON: ${{ secrets.FIREBASE_ANDROID_SERVICES_JSON }}
        run: echo $SERVICES_JSON > android/app/google-services.json
      - name: Generate code
        run: scripts/.generate-code.sh code
      - name: Build APK
        run: flutter build apk --dart-define=IS_PROD=true --build-name ${{ needs.version.outputs.version }} --build-number ${{ needs.version.outputs.increment }}
      - name: Upload Android build
        if: ${{ inputs.storeArtifacts }}
        uses: actions/upload-artifact@v3.0.0
        with:
          name: android
          path: build/app/outputs/apk/release

  test:
    name: Test Flutter app
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.4.0
      - name: Setup Flutter environment
        uses: subosito/flutter-action@v1.5.3
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
      - name: Download dependencies
        run: flutter pub get
      - name: Generate code
        run: scripts/.generate-code.sh code
      - name: Check formatting
        run: flutter format --set-exit-if-changed .
      - name: Static Analysis
        run: flutter analyze
      - name: Run tests
        run: flutter test --coverage
      - name: Upload test report to Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          flags: unittests
          file: coverage/lcov.info
