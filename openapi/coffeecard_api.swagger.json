{
  "x-generator": "NSwag v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Cafe Analog CoffeeCard API",
    "description": "ASP.NET Core WebAPI for Cafe Analog",
    "contact": {
      "name": "AnalogIO",
      "url": "https://github.com/analogio",
      "email": "support@analogio.dk"
    },
    "license": {
      "name": "Use under MIT",
      "url": "https://github.com/AnalogIO/analog-core/blob/master/LICENSE"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://core.dev.analogio.dk"
    }
  ],
  "paths": {
    "/api/v1/Account/register": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Register a new account. A account is required to verify its email before logging in",
        "operationId": "Account_Register",
        "requestBody": {
          "x-name": "registerDto",
          "description": "Register data object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Successful account creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Email already registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Account/login": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Returns a token that is used to identify the account",
        "operationId": "Account_Login",
        "requestBody": {
          "x-name": "loginDto",
          "description": "Login data object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful account login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "403": {
            "description": "Account email not verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Returns basic data about the account",
        "operationId": "Account_Get",
        "responses": {
          "410": {
            "description": "Deprecated"
          }
        },
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Updates the account and returns the updated values.\nOnly properties which are present in the UpdateUserDto will be updated",
        "operationId": "Account_Update",
        "requestBody": {
          "x-name": "updateUserDto",
          "description": "Update account information request. All properties are optional as the server only\n            updates the values of the properties which are present",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "410": {
            "description": "Deprecated"
          }
        },
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      }
    },
    "/api/v1/Account/forgotpassword": {
      "post": {
        "tags": [
          "Account"
        ],
        "operationId": "Account_ForgotPassword",
        "requestBody": {
          "x-name": "emailDTO",
          "description": "Account email",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "E-mail not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/AppConfig": {
      "get": {
        "tags": [
          "AppConfig"
        ],
        "summary": "Get app configuration",
        "operationId": "AppConfig_Get",
        "responses": {
          "410": {
            "description": "Deprecated"
          }
        },
        "deprecated": true,
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      }
    },
    "/api/v1/CoffeeCards": {
      "get": {
        "tags": [
          "CoffeeCards"
        ],
        "summary": "Retrieve the coffee cards of the account",
        "operationId": "CoffeeCards_Get",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoffeeCardDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      }
    },
    "/api/v1/Leaderboard": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Gets the leaderboard by the specified preset",
        "operationId": "Leaderboard_Get",
        "parameters": [
          {
            "name": "preset",
            "in": "query",
            "description": "Leaderboard preset. 0 - Monthly, 1 - Semester and 2 - Total",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "top",
            "in": "query",
            "description": "Number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-position": 2
          }
        ],
        "responses": {
          "410": {
            "description": "Deprecated"
          }
        }
      }
    },
    "/api/v1/MobilePay/initiate": {
      "post": {
        "tags": [
          "MobilePay"
        ],
        "summary": "Initiates a purchase from the given productId and returns an orderId",
        "operationId": "MobilePay_InitiatePurchase",
        "requestBody": {
          "x-name": "initiatePurchaseDto",
          "description": "Initiate purchase request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiatePurchaseDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "410": {
            "description": "Deprecated"
          }
        },
        "deprecated": true,
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      }
    },
    "/api/v1/MobilePay/complete": {
      "post": {
        "tags": [
          "MobilePay"
        ],
        "summary": "Validates the purchase against MobilePay and delivers the tickets if succeeded",
        "operationId": "MobilePay_CompletePurchase",
        "requestBody": {
          "x-name": "dto",
          "description": "Complete purchase request with MobilePay reference",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletePurchaseDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "410": {
            "description": "Deprecated"
          }
        },
        "deprecated": true,
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      }
    },
    "/api/v1/Ping": {
      "get": {
        "tags": [
          "Ping"
        ],
        "summary": "Ping",
        "operationId": "Ping_Ping",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/Products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Returns a list of available products based on a account's user group",
        "operationId": "Products_GetProductsPublic",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Products/app": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Returns a list of available products based on a account's user group",
        "operationId": "Products_GetProductsForUser",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      }
    },
    "/api/v1/Programmes": {
      "get": {
        "tags": [
          "Programmes"
        ],
        "summary": "Returns a list of available programmes",
        "operationId": "Programmes_Get",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgrammeDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Purchases": {
      "get": {
        "tags": [
          "Purchases"
        ],
        "summary": "Returns a list of purchases for the given user via the supplied token in the header",
        "operationId": "Purchases_Get",
        "responses": {
          "410": {
            "description": "Deprecated"
          }
        },
        "deprecated": true,
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      }
    },
    "/api/v1/Purchases/redeemvoucher": {
      "post": {
        "tags": [
          "Purchases"
        ],
        "summary": "Redeems the voucher supplied as parameter in the path",
        "operationId": "Purchases_RedeemVoucher",
        "parameters": [
          {
            "name": "voucherCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseDto"
                }
              }
            }
          },
          "409": {
            "description": "Voucher code already used",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "Voucher code not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      }
    },
    "/api/v1/Purchases/issueproduct": {
      "post": {
        "tags": [
          "Purchases"
        ],
        "summary": "Issue purchase used by the ipad in the cafe",
        "operationId": "Purchases_IssueProduct",
        "requestBody": {
          "x-name": "issueProduct",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueProductDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "410": {
            "description": "Deprecated"
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/Tickets": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns a list of tickets",
        "operationId": "Tickets_Get",
        "parameters": [
          {
            "name": "used",
            "in": "query",
            "description": "Include already used tickets",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      }
    },
    "/api/v1/Tickets/useMultiple": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Uses the tickets supplied via product ids in the body",
        "operationId": "Tickets_UseMultipleTickets",
        "requestBody": {
          "x-name": "dto",
          "description": "Use multiple tickets request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UseMultipleTicketDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, not enough tickets. See explanation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      }
    },
    "/api/v1/Tickets/use": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Use ticket request",
        "operationId": "Tickets_Use",
        "requestBody": {
          "x-name": "dto",
          "description": "Use ticket request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UseTicketDTO"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsedTicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, not enough tickets. See explanation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": [
          {
            "jwt": []
          },
          {
            "apikey": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "MessageResponseDto": {
        "type": "object",
        "description": "Simple response class with a string message",
        "example": {
          "message": "Successful completion"
        },
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "description": "Message with API response",
            "nullable": true,
            "example": "Successful completion"
          }
        }
      },
      "RegisterDto": {
        "type": "object",
        "description": "Register a new user data object",
        "example": {
          "name": "John Doe",
          "email": "john@doe.com",
          "password": "[no example provided]"
        },
        "additionalProperties": false,
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Full Name of user",
            "minLength": 1,
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email Address of user",
            "format": "email",
            "minLength": 1,
            "example": "john@doe.com"
          },
          "password": {
            "type": "string",
            "description": "Pin Code as first UTF8 encoded, then SHA256 hashed, and then Base64 encoded string",
            "minLength": 1,
            "example": "[no example provided]"
          }
        }
      },
      "TokenDto": {
        "type": "object",
        "description": "Login response with Bearer JWT Token",
        "example": {
          "token": "[no example provided]"
        },
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "Bearer JWT token used for authentication",
            "nullable": true,
            "example": "[no example provided]"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "description": "Login data object",
        "example": {
          "email": "john@doe.com",
          "password": "[no example provided]",
          "version": "2.1.0"
        },
        "additionalProperties": false,
        "required": [
          "email",
          "password",
          "version"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Email Address of user",
            "format": "email",
            "minLength": 1,
            "example": "john@doe.com"
          },
          "password": {
            "type": "string",
            "description": "Pin Code as first UTF8 encoded, then SHA256 hashed, and then Base64 encoded string",
            "minLength": 1,
            "example": "[no example provided]"
          },
          "version": {
            "type": "string",
            "description": "App version of device logging in",
            "minLength": 1,
            "example": "2.1.0"
          }
        }
      },
      "UpdateUserDto": {
        "type": "object",
        "description": "Update User information request object. All properties are optional as the server only updates the values of the properties which are present",
        "example": {
          "name": "John Doe",
          "email": "john@doe.com",
          "privacyActivated": true,
          "programmeId": 1,
          "password": "[no example provided]"
        },
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Full Name of user",
            "nullable": true,
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email of user",
            "format": "email",
            "nullable": true,
            "example": "john@doe.com"
          },
          "privacyActivated": {
            "type": "boolean",
            "description": "Privacy Activated",
            "nullable": true,
            "example": true
          },
          "programmeId": {
            "type": "integer",
            "description": "Study Programme Id of user",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "password": {
            "type": "string",
            "description": "Pin Code as first UTF8 encoded, then SHA256 hashed, and then Base64 encoded string",
            "nullable": true,
            "example": "[no example provided]"
          }
        }
      },
      "EmailDto": {
        "type": "object",
        "description": "User email data object",
        "example": {
          "email": "john@doe.com"
        },
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "User Email",
            "format": "email",
            "minLength": 1,
            "example": "john@doe.com"
          }
        }
      },
      "CoffeeCardDto": {
        "type": "object",
        "description": "A CoffeeCard is a union datatype of a product and unused tickets associated with the product. ",
        "example": {
          "productId": 1,
          "name": "Filter Coffee",
          "ticketsLeft": 5,
          "price": 50,
          "quantity": 10
        },
        "additionalProperties": false,
        "required": [
          "productId",
          "name",
          "ticketsLeft",
          "price",
          "quantity"
        ],
        "properties": {
          "productId": {
            "type": "integer",
            "description": "Id of product",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of product",
            "minLength": 1,
            "example": "Filter Coffee"
          },
          "ticketsLeft": {
            "type": "integer",
            "description": "Remaining (if any) unused tickets left for product",
            "format": "int32",
            "example": 5
          },
          "price": {
            "type": "integer",
            "description": "Price of product",
            "format": "int32",
            "example": 50
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of tickets in product",
            "format": "int32",
            "example": 10
          }
        }
      },
      "InitiatePurchaseDto": {
        "type": "object",
        "description": "Initiate a new purchase request",
        "example": {
          "productId": 1
        },
        "additionalProperties": false,
        "required": [
          "productId"
        ],
        "properties": {
          "productId": {
            "type": "integer",
            "description": "Id of product for purchase request",
            "format": "int32",
            "example": 1
          }
        }
      },
      "CompletePurchaseDto": {
        "type": "object",
        "description": "Represents a request to complete a purchase",
        "example": {
          "orderId": "ae76a5ba-82e8-46d8-8431-6cbb3130b94a",
          "transactionId": "123241619"
        },
        "additionalProperties": false,
        "required": [
          "orderId",
          "transactionId"
        ],
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Order Id for purchase",
            "minLength": 1,
            "example": "ae76a5ba-82e8-46d8-8431-6cbb3130b94a"
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction Id at external payment provider",
            "minLength": 1,
            "example": 123241619
          }
        }
      },
      "ProductDto": {
        "type": "object",
        "description": "Represents a purchasable product",
        "example": {
          "id": 1,
          "price": 300,
          "numberOfTickets": 10,
          "name": "Coffee clip card",
          "description": "Coffee clip card of 10 clips"
        },
        "additionalProperties": false,
        "required": [
          "id",
          "price",
          "numberOfTickets",
          "name",
          "description"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of product",
            "format": "int32",
            "example": 1
          },
          "price": {
            "type": "integer",
            "description": "Product price",
            "format": "int32",
            "example": 300
          },
          "numberOfTickets": {
            "type": "integer",
            "description": "Number of tickets in product",
            "format": "int32",
            "example": 10
          },
          "name": {
            "type": "string",
            "description": "Name of product",
            "minLength": 1,
            "example": "Coffee clip card"
          },
          "description": {
            "type": "string",
            "description": "Description of products",
            "minLength": 1,
            "example": "Coffee clip card of 10 clips"
          }
        }
      },
      "ProgrammeDto": {
        "type": "object",
        "description": "Represents a study programme",
        "example": {
          "id": 1,
          "shortName": "SWU",
          "fullName": "Software Development"
        },
        "additionalProperties": false,
        "required": [
          "id",
          "shortName",
          "fullName"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of study programme",
            "format": "int32",
            "example": 1
          },
          "shortName": {
            "type": "string",
            "description": "Short name of study programme",
            "minLength": 1,
            "example": "SWU"
          },
          "fullName": {
            "type": "string",
            "description": "Full name of study programme",
            "minLength": 1,
            "example": "Software development"
          }
        }
      },
      "PurchaseDto": {
        "type": "object",
        "description": "Represents a purchase",
        "example": "{\n    \"id\": 22,\n    \"productName\": \"Coffee\",\n    \"productId\": 1,\n    \"price\": 300,\n    \"numberOfTickets\": 10,\n    \"dateCreated\": \"2022-01-09T21:03:52.2283208Z\",\n    \"completed: true,\n    \"orderId\": \"f5cb3e0f-3b9b-4f50-8c4f-a7450f300a5c\",\n    \"transactionId\": \"1482981489\"\n}",
        "additionalProperties": false,
        "required": [
          "id",
          "productName",
          "productId",
          "price",
          "numberOfTickets",
          "dateCreated",
          "completed",
          "orderId",
          "transactionId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of purchase",
            "format": "int32",
            "example": 1371
          },
          "productName": {
            "type": "string",
            "description": "Name of purchased product",
            "minLength": 1,
            "example": "Coffee"
          },
          "productId": {
            "type": "integer",
            "description": "Id of purchased product",
            "format": "int32",
            "example": 1
          },
          "price": {
            "type": "integer",
            "description": "Total purchase price in Danish Kroner (kr)",
            "format": "int32",
            "example": 300
          },
          "numberOfTickets": {
            "type": "integer",
            "description": "Number of tickets issued in purchase",
            "format": "int32",
            "example": 10
          },
          "dateCreated": {
            "type": "string",
            "description": "Date time for purchase in Utc format",
            "format": "date-time",
            "minLength": 1,
            "example": "2022-01-09T21:03:52.2283208Z"
          },
          "completed": {
            "type": "boolean",
            "description": "Is purchase completed (with MobilePay)",
            "example": true
          },
          "orderId": {
            "type": "string",
            "description": "Order Id",
            "minLength": 1,
            "example": "f5cb3e0f-3b9b-4f50-8c4f-a7450f300a5c"
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction id at external payment provider",
            "minLength": 1,
            "example": 1482981489
          }
        }
      },
      "IssueProductDto": {
        "type": "object",
        "description": "Issue product request",
        "example": {
          "issuedBy": "dann",
          "userId": "122",
          "productId": 1
        },
        "additionalProperties": false,
        "required": [
          "issuedBy",
          "userId",
          "productId"
        ],
        "properties": {
          "issuedBy": {
            "type": "string",
            "description": "Name/Initials of person who issued purchase",
            "minLength": 1
          },
          "userId": {
            "type": "integer",
            "description": "User id who should receive the product",
            "format": "int32",
            "example": 122
          },
          "productId": {
            "type": "integer",
            "description": "Id of Product to issue",
            "format": "int32",
            "example": 1
          }
        }
      },
      "TicketDto": {
        "type": "object",
        "description": "Representing a ticket for a product",
        "example": "{\n    \"id\": 122,\n    \"dateCreated\": \"2022-01-09T21:03:52.2283208Z\",\n    \"dateUsed\": \"2022-01-09T21:03:52.2283208Z\",\n    \"productName: \"Coffee\"\n}",
        "additionalProperties": false,
        "required": [
          "id",
          "dateCreated",
          "dateUsed",
          "productName"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Ticket Id",
            "format": "int32",
            "example": 122
          },
          "dateCreated": {
            "type": "string",
            "description": "Issuing date time for ticket in Utc format",
            "format": "date-time",
            "minLength": 1,
            "example": "2022-01-09T21:03:52.2283208Z"
          },
          "dateUsed": {
            "type": "string",
            "description": "Used date time for ticket in Utc format",
            "format": "date-time",
            "nullable": true,
            "example": "2022-01-09T21:03:52.2283208Z"
          },
          "productName": {
            "type": "string",
            "description": "Name of product a ticket is for",
            "minLength": 1,
            "example": "Coffee"
          }
        }
      },
      "UseMultipleTicketDto": {
        "type": "object",
        "description": "Use multiple tickets request",
        "example": {
          "productIds": [
            1,
            2
          ]
        },
        "additionalProperties": false,
        "required": [
          "productIds"
        ],
        "properties": {
          "productIds": {
            "type": "array",
            "description": "List of products ids to use a ticket for",
            "example": "1, 2",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "UsedTicketResponse": {
        "type": "object",
        "description": "Representing a used ticket for a product",
        "example": "{\n    \"id\": 122,\n    \"dateCreated\": \"2022-01-09T21:03:52.2283208Z\",\n    \"dateUsed\": \"2022-01-09T21:03:52.2283208Z\",\n    \"productName: \"Coffee\"\n}",
        "additionalProperties": false,
        "required": [
          "id",
          "dateCreated",
          "dateUsed",
          "productName"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Ticket Id",
            "format": "int32",
            "example": 122
          },
          "dateCreated": {
            "type": "string",
            "description": "Issuing date time for ticket in Utc format",
            "format": "date-time",
            "minLength": 1,
            "example": "2022-01-09T21:03:52.2283208Z"
          },
          "dateUsed": {
            "type": "string",
            "description": "Used date time for ticket in Utc format",
            "format": "date-time",
            "minLength": 1,
            "example": "2022-01-09T21:03:52.2283208Z"
          },
          "productName": {
            "type": "string",
            "description": "Name of product a ticket is for",
            "minLength": 1,
            "example": "Coffee"
          }
        }
      },
      "UseTicketDTO": {
        "type": "object",
        "description": "Use ticket request",
        "example": {
          "productId": 1
        },
        "additionalProperties": false,
        "required": [
          "productId"
        ],
        "properties": {
          "productId": {
            "type": "integer",
            "description": "Id of product to use a ticket for",
            "format": "int32",
            "example": 1
          }
        }
      }
    },
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "description": "JWT Bearer token",
        "name": "Authorization",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "apikey": {
        "type": "apiKey",
        "description": "Api Key used for health endpoints",
        "name": "x-api-key",
        "in": "header"
      }
    }
  }
}