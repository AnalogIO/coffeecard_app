{
  "x-generator": "NSwag v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Cafe Analog CoffeeCard API",
    "description": "ASP.NET Core WebAPI for Cafe Analog",
    "contact": {
      "name": "AnalogIO",
      "url": "https://github.com/analogio",
      "email": "support@analogio.dk"
    },
    "license": {
      "name": "Use under MIT",
      "url": "https://github.com/AnalogIO/analog-core/blob/master/LICENSE"
    },
    "version": "v2"
  },
  "servers": [
    {
      "url": "https://localhost:5001"
    }
  ],
  "paths": {
    "/api/v2/account": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Register data request. An account is required to verify its email before logging in",
        "operationId": "Account_Register",
        "requestBody": {
          "x-name": "registerRequest",
          "description": "Register data object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterAccountRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Successful account creation. Verification request email sent to provided email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Email already registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Request the deletion of the user coupled to the provided token",
        "operationId": "Account_Delete",
        "responses": {
          "204": {
            "description": "Successful initiation of account deletion process"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Returns basic data about the account",
        "operationId": "Account_Get",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Updates the account and returns the updated values.\nOnly properties which are present in the UpdateUserRequest will be updated",
        "operationId": "Account_Update",
        "requestBody": {
          "x-name": "updateUserRequest",
          "description": "Update account information request. All properties are optional as the server only\n            updates the values of the properties which are present",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v2/account/email-exists": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Check if a given email is in use",
        "operationId": "Account_EmailExists",
        "requestBody": {
          "x-name": "request",
          "description": "The email that should be checked",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailExistsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailExistsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/v2/appconfig": {
      "get": {
        "tags": [
          "AppConfig"
        ],
        "summary": "Get app configuration",
        "operationId": "AppConfig_Get",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/leaderboard/top": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Gets the top leaderboard by the specified preset",
        "operationId": "Leaderboard_GetTopEntries",
        "parameters": [
          {
            "name": "preset",
            "in": "query",
            "description": "Leaderboard preset for date filtering. See LeaderboardPreset for possible values",
            "schema": {
              "default": "Semester",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LeaderboardPreset"
                }
              ]
            },
            "x-position": 1
          },
          {
            "name": "top",
            "in": "query",
            "description": "Number of top results to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Top leader board entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaderboardEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/leaderboard": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Get leaderboard stats for authenticated user. A user will have rank 0 if they do not have any valid swipes",
        "operationId": "Leaderboard_Get",
        "parameters": [
          {
            "name": "preset",
            "in": "query",
            "description": "Leaderboard preset for date filtering. See LeaderboardPreset for possible values",
            "schema": {
              "default": "Semester",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LeaderboardPreset"
                }
              ]
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Leaderboard entry for user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardEntry"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v2/mobilepay/webhook": {
      "post": {
        "tags": [
          "MobilePay"
        ],
        "summary": "Webhook to be invoked by MobilePay backend",
        "operationId": "MobilePay_Webhook",
        "parameters": [
          {
            "name": "x-mobilepay-signature",
            "x-originalName": "mpSignatureHeader",
            "in": "header",
            "description": "Webhook mpSignatureHeader",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Webhook request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MobilePayWebhook"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": "Webhook processed"
          },
          "400": {
            "description": "Signature is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v2/purchases": {
      "get": {
        "tags": [
          "Purchases"
        ],
        "summary": "Get all purchases",
        "operationId": "Purchases_GetAllPurchases",
        "responses": {
          "200": {
            "description": "All purchases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimplePurchaseResponse"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No purchases"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Purchases"
        ],
        "summary": "Initiate a new payment.",
        "operationId": "Purchases_InitiatePurchase",
        "requestBody": {
          "x-name": "initiateRequest",
          "description": "Initiate request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiatePurchaseRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Purchased initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiatePurchaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "403": {
            "description": "User not allowed to purchase given product"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v2/purchases/{id}": {
      "get": {
        "tags": [
          "Purchases"
        ],
        "summary": "Get purchase",
        "operationId": "Purchases_GetPurchase",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Purchase Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SinglePurchaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "No purchase found with purchase-id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v2/tickets": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns a list of tickets",
        "operationId": "Tickets_Get",
        "parameters": [
          {
            "name": "includeUsed",
            "in": "query",
            "description": "Include already used tickets",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v2/vouchers/issue-vouchers": {
      "post": {
        "tags": [
          "Vouchers"
        ],
        "summary": "Issue voucher codes, that can later be redeemed",
        "operationId": "Vouchers_IssueVouchers",
        "requestBody": {
          "x-name": "request",
          "description": "Use ticket request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueVoucherRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueVoucherResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. See explanation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "403": {
            "description": "Invalid role in credentials"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v2/vouchers/{voucher-code}/redeem": {
      "post": {
        "tags": [
          "Vouchers"
        ],
        "summary": "Redeems the voucher supplied as parameter in the path",
        "operationId": "Vouchers_RedeemVoucher",
        "parameters": [
          {
            "name": "voucher-code",
            "x-originalName": "voucherCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePurchaseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Voucher code already used",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "Voucher code not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "MessageResponseDto": {
        "type": "object",
        "description": "Simple response class with a string message",
        "example": {
          "message": "Successful completion"
        },
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "description": "Message with API response",
            "example": "Successful completion"
          }
        }
      },
      "RegisterAccountRequest": {
        "type": "object",
        "description": "Register a new user",
        "example": {
          "name": "John Doe",
          "email": "john@doe.com",
          "password": "[no example provided]",
          "programme": 1
        },
        "additionalProperties": false,
        "required": [
          "name",
          "email",
          "password",
          "programmeId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Full Name of user",
            "minLength": 1,
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email Address of user",
            "format": "email",
            "minLength": 1,
            "example": "john@doe.com"
          },
          "password": {
            "type": "string",
            "description": "Pin Code as first UTF8 encoded, then SHA256 hashed, and then Base64 encoded string",
            "minLength": 1,
            "example": "[no example provided]"
          },
          "programmeId": {
            "type": "integer",
            "description": "Programme of user",
            "format": "int32",
            "example": 1
          }
        }
      },
      "ApiException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Exception"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "StatusCode": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "Exception": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "StackTrace": {
            "type": "string",
            "nullable": true
          },
          "Message": {
            "type": "string"
          },
          "InnerException": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Exception"
              }
            ]
          },
          "Source": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "description": "User information",
        "example": {
          "id": 123,
          "name": "John Doe",
          "email": "john@doe.com",
          "privacyActivated": true,
          "programme": 1,
          "rankAllTime": 15,
          "rankSemester": 4,
          "rankMonth": 5
        },
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "email",
          "privacyActivated",
          "programme",
          "rankAllTime",
          "rankSemester",
          "rankMonth"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "User Id",
            "format": "int32",
            "example": 123
          },
          "name": {
            "type": "string",
            "description": "Full Name of user",
            "minLength": 1,
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email of user",
            "minLength": 1,
            "example": "john@doe.com"
          },
          "privacyActivated": {
            "type": "boolean",
            "description": "Privacy Activated",
            "example": true
          },
          "programme": {
            "description": "Study Programme Id of user",
            "example": 1,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ProgrammeResponse"
              }
            ]
          },
          "rankAllTime": {
            "type": "integer",
            "description": "User's Rank all time",
            "format": "int32",
            "example": 15
          },
          "rankSemester": {
            "type": "integer",
            "description": "User's rank current semester",
            "format": "int32",
            "example": 4
          },
          "rankMonth": {
            "type": "integer",
            "description": "User's rank current month",
            "format": "int32",
            "example": 5
          }
        }
      },
      "ProgrammeResponse": {
        "type": "object",
        "description": "Represents a study programme",
        "example": {
          "id": 1,
          "shortName": "SWU",
          "fullName": "Software Development"
        },
        "additionalProperties": false,
        "required": [
          "id",
          "shortName",
          "fullName"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of study programme",
            "format": "int32",
            "example": 1
          },
          "shortName": {
            "type": "string",
            "description": "Short name of study programme",
            "minLength": 1,
            "example": "SWU"
          },
          "fullName": {
            "type": "string",
            "description": "Full name of study programme",
            "minLength": 1,
            "example": "Software development"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "description": "Update User information request object. All properties are optional as the server only updates the values of the properties which are present",
        "example": {
          "name": "John Doe",
          "email": "john@doe.com",
          "privacyActivated": true,
          "programmeId": 1,
          "password": "[no example provided]"
        },
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Full Name of user",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email of user",
            "format": "email",
            "example": "john@doe.com"
          },
          "privacyActivated": {
            "type": "boolean",
            "description": "Privacy Activated",
            "nullable": true,
            "example": true
          },
          "programmeId": {
            "type": "integer",
            "description": "Study Programme Id of user",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "password": {
            "type": "string",
            "description": "Pin Code as first UTF8 encoded, then SHA256 hashed, and then Base64 encoded string",
            "example": "[no example provided]"
          }
        }
      },
      "EmailExistsResponse": {
        "type": "object",
        "description": "Contains information about an email being in use",
        "example": {
          "emailExists": true
        },
        "additionalProperties": false,
        "required": [
          "emailExists"
        ],
        "properties": {
          "emailExists": {
            "type": "boolean",
            "description": "Contains information about an email being in use"
          }
        }
      },
      "EmailExistsRequest": {
        "type": "object",
        "description": "An email that should be checked if it already exists",
        "example": {
          "email": "johndoe@mail.com"
        },
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Email",
            "format": "email",
            "minLength": 1,
            "example": "johndoe@mail.com"
          }
        }
      },
      "AppConfig": {
        "type": "object",
        "description": "App Configuration",
        "example": {
          "environmentType": "Production"
        },
        "additionalProperties": false,
        "required": [
          "environmentType"
        ],
        "properties": {
          "environmentType": {
            "description": "Environment type for indicating production or test system",
            "example": "Production",
            "oneOf": [
              {
                "$ref": "#/components/schemas/EnvironmentType"
              }
            ]
          }
        }
      },
      "EnvironmentType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Production",
          "Test",
          "LocalDevelopment"
        ],
        "enum": [
          "Production",
          "Test",
          "LocalDevelopment"
        ]
      },
      "LeaderboardEntry": {
        "type": "object",
        "description": "A user on the leaderboard",
        "example": {
          "id": "1",
          "name": "John Doe",
          "rank": 2,
          "score": 25
        },
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Account Id",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Account name",
            "example": "John Doe"
          },
          "rank": {
            "type": "integer",
            "description": "Leaderboard rank",
            "format": "int32",
            "example": 2
          },
          "score": {
            "type": "integer",
            "description": "Account score",
            "format": "int32",
            "example": 25
          }
        }
      },
      "LeaderboardPreset": {
        "type": "string",
        "description": "Preset for filtering Leaderboard based on date range",
        "x-enumNames": [
          "Month",
          "Semester",
          "Total"
        ],
        "enum": [
          "Month",
          "Semester",
          "Total"
        ]
      },
      "MobilePayWebhook": {
        "type": "object",
        "description": "MobilePay webhook invocation request \nCode documentation based on MobilePay Developer: Webhooks",
        "example": {
          "notificationId": "c85f42aa-0a81-4838-8e87-72236a348d08",
          "eventType": "payment.reserved",
          "eventDate": "2021-10-15T15:30:31Z",
          "data": {
            "id": "ceb351ac-9d20-4300-b5ad-e05851d5a3b7",
            "type": "payment"
          }
        },
        "additionalProperties": false,
        "properties": {
          "notificationId": {
            "type": "string",
            "description": "Internal MobilePay Id for Webhook invocation",
            "example": "c85f42aa-0a81-4838-8e87-72236a348d08"
          },
          "eventType": {
            "type": "string",
            "description": "Type of event\n\n    \n        payment.reserved\n        Published when payment has been approved by MobilePay user and is ready to be captured\n    \n    \n        payment.cancelled_by_user\n        Published when payment has been cancelled by user inside MobilePay app\n    \n    \n        payment.expired\n        Published when either initiated payment didn't have any user interactions for 5-10 minutes or payment was reserved, but 7 days have passed and the reservation has expired.\n    ",
            "example": "payment.expired"
          },
          "eventDate": {
            "type": "string",
            "description": "Date time of event dispatch",
            "format": "date-time"
          },
          "data": {
            "description": "Event data, e.g. payment id",
            "oneOf": [
              {
                "$ref": "#/components/schemas/EventData"
              }
            ]
          }
        }
      },
      "EventData": {
        "type": "object",
        "description": "Event Data",
        "example": {
          "id": "ceb351ac-9d20-4300-b5ad-e05851d5a3b7",
          "type": "payment"
        },
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "MobilePay payment id",
            "example": "ceb351ac-9d20-4300-b5ad-e05851d5a3b7"
          },
          "type": {
            "type": "string",
            "description": "Internal MobilePay representation of a type.",
            "example": "payment"
          }
        }
      },
      "SimplePurchaseResponse": {
        "type": "object",
        "description": "Represents a purchase",
        "example": {
          "id": 22,
          "dateCreated": "2022-01-09T21:03:52.2283208Z",
          "productId": 1,
          "productName": "Filter coffee",
          "totalAmount": 300,
          "purchaseStatus": "Completed"
        },
        "additionalProperties": false,
        "required": [
          "id",
          "dateCreated",
          "productId",
          "productName",
          "numberOfTickets",
          "totalAmount",
          "purchaseStatus"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of purchase",
            "format": "int32",
            "example": 1371
          },
          "dateCreated": {
            "type": "string",
            "description": "Date time for purchase in Utc format",
            "format": "date-time",
            "minLength": 1,
            "example": "2022-01-09T21:03:52.2283208Z"
          },
          "productId": {
            "type": "integer",
            "description": "Id of purchased product",
            "format": "int32",
            "example": 1
          },
          "productName": {
            "type": "string",
            "description": "Name of purchased product",
            "minLength": 1,
            "example": 1
          },
          "numberOfTickets": {
            "type": "integer",
            "description": "Number of tickets issued in purchase",
            "format": "int32",
            "example": 10
          },
          "totalAmount": {
            "type": "integer",
            "description": "Total purchase price in Danish Kroner (kr)",
            "format": "int32",
            "example": 300
          },
          "purchaseStatus": {
            "description": "Status of the purchase",
            "example": "Completed",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PurchaseStatus"
              }
            ]
          }
        }
      },
      "PurchaseStatus": {
        "type": "string",
        "description": "Status of purchase",
        "x-enumNames": [
          "Completed",
          "Cancelled",
          "PendingPayment",
          "Refunded"
        ],
        "enum": [
          "Completed",
          "Cancelled",
          "PendingPayment",
          "Refunded"
        ]
      },
      "SinglePurchaseResponse": {
        "type": "object",
        "description": "Represents a purchase",
        "example": {
          "id": 22,
          "dateCreated": "2022-01-09T21:03:52.2283208Z",
          "productId": 1,
          "totalAmount": 300,
          "purchaseStatus": "Completed",
          "paymentDetails": {
            "paymentType": "MobilePay",
            "orderId": "f5cb3e0f-3b9b-4f50-8c4f-a7450f300a5c",
            "mobilePayAppRedirectUri": "mobilepay://merchant_payments?payment_id=186d2b31-ff25-4414-9fd1-bfe9807fa8b7",
            "paymentId": "186d2b31-ff25-4414-9fd1-bfe9807fa8b7"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "dateCreated",
          "productId",
          "totalAmount",
          "purchaseStatus",
          "paymentDetails"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of purchase",
            "format": "int32",
            "example": 1371
          },
          "dateCreated": {
            "type": "string",
            "description": "Date time for purchase in Utc format",
            "format": "date-time",
            "minLength": 1,
            "example": "2022-01-09T21:03:52.2283208Z"
          },
          "productId": {
            "type": "integer",
            "description": "Id of purchased product",
            "format": "int32",
            "example": 1
          },
          "totalAmount": {
            "type": "integer",
            "description": "Total purchase price in Danish Kroner (kr)",
            "format": "int32",
            "example": 300
          },
          "purchaseStatus": {
            "description": "Status of the purchase",
            "example": "Completed",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PurchaseStatus"
              }
            ]
          },
          "paymentDetails": {
            "description": "Details about the payment. The details object is specific to the Payment Type",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentDetails"
              }
            ]
          }
        }
      },
      "PaymentDetails": {
        "type": "object",
        "discriminator": {
          "propertyName": "discriminator"
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "paymentType",
          "orderId",
          "discriminator"
        ],
        "properties": {
          "paymentType": {
            "description": "Payment type",
            "example": "MobilePay",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ]
          },
          "orderId": {
            "type": "string",
            "description": "Order id of purchase",
            "minLength": 1,
            "example": "f5cb3e0f-3b9b-4f50-8c4f-a7450f300a5c"
          },
          "discriminator": {
            "type": "string"
          }
        }
      },
      "PaymentType": {
        "type": "string",
        "description": "PaymentType represents the type of Payment which is used to fulfill a purchase",
        "x-enumNames": [
          "MobilePay",
          "FreePurchase"
        ],
        "enum": [
          "MobilePay",
          "FreePurchase"
        ]
      },
      "MobilePayPaymentDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          {
            "type": "object",
            "discriminator": {
              "propertyName": "discriminator"
            },
            "description": "MobilePay Payment details",
            "example": {
              "paymentType": "MobilePay",
              "orderId": "f5cb3e0f-3b9b-4f50-8c4f-a7450f300a5c",
              "mobilePayAppRedirectUri": "mobilepay://merchant_payments?payment_id=186d2b31-ff25-4414-9fd1-bfe9807fa8b7",
              "paymentId": "186d2b31-ff25-4414-9fd1-bfe9807fa8b7"
            },
            "additionalProperties": false,
            "required": [
              "mobilePayAppRedirectUri",
              "paymentId",
              "state",
              "discriminator"
            ],
            "properties": {
              "mobilePayAppRedirectUri": {
                "type": "string",
                "description": "App deeplink for a MobilePay payment",
                "minLength": 1,
                "example": "mobilepay://merchant_payments?payment_id=186d2b31-ff25-4414-9fd1-bfe9807fa8b7"
              },
              "paymentId": {
                "type": "string",
                "description": "MobilePay Id for a payment",
                "minLength": 1,
                "example": "186d2b31-ff25-4414-9fd1-bfe9807fa8b7"
              },
              "state": {
                "type": "string",
                "description": "MobilePay state",
                "nullable": true,
                "example": "Initiated"
              },
              "discriminator": {
                "type": "string"
              }
            }
          }
        ]
      },
      "FreePurchasePaymentDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          {
            "type": "object",
            "discriminator": {
              "propertyName": "discriminator"
            },
            "description": "Payment details for a free purchase",
            "example": {
              "paymentType": "FreeProduct",
              "orderId": "f5cb3e0f-3b9b-4f50-8c4f-a7450f300a5c"
            },
            "additionalProperties": false,
            "required": [
              "discriminator"
            ],
            "properties": {
              "discriminator": {
                "type": "string"
              }
            }
          }
        ]
      },
      "InitiatePurchaseResponse": {
        "type": "object",
        "description": "Response object to a purchase request containing purchase information and reference to payment provider",
        "example": {
          "id": 122,
          "dateCreated": "",
          "productId": 1,
          "productName": "Coffee",
          "totalAmount": 100,
          "purchaseStatus": "PendingPayment",
          "paymentDetails": {
            "paymentType": "MobilePay",
            "orderId": "f5cb3e0f-3b9b-4f50-8c4f-a7450f300a5c",
            "mobilePayAppRedirectUri": "mobilepay://merchant_payments?payment_id=186d2b31-ff25-4414-9fd1-bfe9807fa8b7",
            "paymentId": "186d2b31-ff25-4414-9fd1-bfe9807fa8b7"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "dateCreated",
          "productId",
          "productName",
          "totalAmount",
          "purchaseStatus",
          "paymentDetails"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the purchase",
            "format": "int32",
            "example": 122
          },
          "dateCreated": {
            "type": "string",
            "description": "Date time for purchase in Utc format",
            "format": "date-time",
            "minLength": 1,
            "example": "2022-01-09T21:03:52.2283208Z"
          },
          "productId": {
            "type": "integer",
            "description": "Id of the product to be purchased",
            "format": "int32",
            "example": 1
          },
          "productName": {
            "type": "string",
            "description": "Name of the product to be purchased",
            "minLength": 1,
            "example": "Coffee"
          },
          "totalAmount": {
            "type": "integer",
            "description": "The amount of money to be collected by the purchase.\nA positive integer representing how much to charge in the smallest currency unit (e.g., 100 ører to charge 1.00 Danish kroner).",
            "format": "int32",
            "example": 100
          },
          "purchaseStatus": {
            "description": "Status of the purchase",
            "example": "Completed",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PurchaseStatus"
              }
            ]
          },
          "paymentDetails": {
            "description": "Details about the payment. The details object is specific to the Payment Type",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentDetails"
              }
            ]
          }
        }
      },
      "InitiatePurchaseRequest": {
        "type": "object",
        "description": "Initiate a new purchase request",
        "additionalProperties": false,
        "required": [
          "productId",
          "paymentType"
        ],
        "properties": {
          "productId": {
            "type": "integer",
            "description": "Id of product to be purchased",
            "format": "int32",
            "example": 1
          },
          "paymentType": {
            "description": "Payment Type used to fulfill purchase",
            "example": "MobilePay",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ]
          }
        }
      },
      "TicketResponse": {
        "type": "object",
        "description": "Representing a ticket for a product",
        "example": "{\n    \"id\": 122,\n    \"dateCreated\": \"2022-01-09T21:03:52.2283208Z\",\n    \"dateUsed\": \"2022-01-09T21:03:52.2283208Z\",\n    \"productId\": 1,\n    \"productName: \"Coffee\"\n}",
        "additionalProperties": false,
        "required": [
          "id",
          "dateCreated",
          "dateUsed",
          "productId",
          "productName"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Ticket Id",
            "format": "int32",
            "example": 122
          },
          "dateCreated": {
            "type": "string",
            "description": "Issuing date time for ticket in Utc format",
            "format": "date-time",
            "minLength": 1,
            "example": "2022-01-09T21:03:52.2283208Z"
          },
          "dateUsed": {
            "type": "string",
            "description": "Used date time for ticket in Utc format",
            "format": "date-time",
            "nullable": true,
            "example": "2022-01-09T21:03:52.2283208Z"
          },
          "productId": {
            "type": "integer",
            "description": "The Id of product a ticket is for",
            "format": "int32",
            "example": 1
          },
          "productName": {
            "type": "string",
            "description": "Name of product a ticket is for",
            "minLength": 1,
            "example": "Coffee"
          }
        }
      },
      "IssueVoucherResponse": {
        "type": "object",
        "description": "Response object for creating voucher codes",
        "example": {
          "VoucherCode": "ABC-12345678",
          "ProductId": 6,
          "ProductName": "Coffee",
          "IssuedAt": "2023-02-07T12:00:00"
        },
        "additionalProperties": false,
        "required": [
          "voucherCode",
          "productId",
          "productName",
          "issuedAt"
        ],
        "properties": {
          "voucherCode": {
            "type": "string",
            "description": "Voucher code to be redeemed in the app",
            "minLength": 1
          },
          "productId": {
            "type": "integer",
            "description": "The id of the product the voucher code is for",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "description": "The name of the product the voucher code is for",
            "minLength": 1
          },
          "issuedAt": {
            "type": "string",
            "description": "The date the voucher code was created",
            "format": "date-time",
            "minLength": 1
          }
        }
      },
      "ApiError": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "IssueVoucherRequest": {
        "type": "object",
        "description": "Request object for creating voucher codes",
        "example": {
          "ProductId": 6,
          "Amount": 10,
          "VoucherPrefix": "ABC",
          "Description": "Voucher codes for intro week",
          "Requester": "John Doe"
        },
        "additionalProperties": false,
        "required": [
          "productId",
          "amount",
          "voucherPrefix",
          "description",
          "requester"
        ],
        "properties": {
          "productId": {
            "type": "integer",
            "description": "Id of the product to create voucher codes for",
            "format": "int32",
            "example": 6
          },
          "amount": {
            "type": "integer",
            "description": "The amount of vouchers to be issued",
            "format": "int32",
            "example": 10
          },
          "voucherPrefix": {
            "type": "string",
            "description": "A 3 character long user defined prefix for every voucher code",
            "maxLength": 3,
            "minLength": 3,
            "example": "ABC"
          },
          "description": {
            "type": "string",
            "description": "Description of the purpose for the creation of vouchers",
            "minLength": 1,
            "example": "Voucher codes for intro week   "
          },
          "requester": {
            "type": "string",
            "description": "The requester of the voucher codes",
            "minLength": 1,
            "example": "John Doe"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Insert a JWT Bearer token: Bearer {token}",
        "name": "Authorization",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
